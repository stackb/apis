// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package syntax_highlight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyntaxHighlighterClient is the client API for SyntaxHighlighter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntaxHighlighterClient interface {
	SyntaxHighlight(ctx context.Context, in *SyntaxHighlightRequest, opts ...grpc.CallOption) (*SyntaxHighlightResponse, error)
}

type syntaxHighlighterClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntaxHighlighterClient(cc grpc.ClientConnInterface) SyntaxHighlighterClient {
	return &syntaxHighlighterClient{cc}
}

func (c *syntaxHighlighterClient) SyntaxHighlight(ctx context.Context, in *SyntaxHighlightRequest, opts ...grpc.CallOption) (*SyntaxHighlightResponse, error) {
	out := new(SyntaxHighlightResponse)
	err := c.cc.Invoke(ctx, "/build.stack.syntax_highlight.v1beta1.SyntaxHighlighter/SyntaxHighlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyntaxHighlighterServer is the server API for SyntaxHighlighter service.
// All implementations must embed UnimplementedSyntaxHighlighterServer
// for forward compatibility
type SyntaxHighlighterServer interface {
	SyntaxHighlight(context.Context, *SyntaxHighlightRequest) (*SyntaxHighlightResponse, error)
	mustEmbedUnimplementedSyntaxHighlighterServer()
}

// UnimplementedSyntaxHighlighterServer must be embedded to have forward compatible implementations.
type UnimplementedSyntaxHighlighterServer struct {
}

func (UnimplementedSyntaxHighlighterServer) SyntaxHighlight(context.Context, *SyntaxHighlightRequest) (*SyntaxHighlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyntaxHighlight not implemented")
}
func (UnimplementedSyntaxHighlighterServer) mustEmbedUnimplementedSyntaxHighlighterServer() {}

// UnsafeSyntaxHighlighterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntaxHighlighterServer will
// result in compilation errors.
type UnsafeSyntaxHighlighterServer interface {
	mustEmbedUnimplementedSyntaxHighlighterServer()
}

func RegisterSyntaxHighlighterServer(s grpc.ServiceRegistrar, srv SyntaxHighlighterServer) {
	s.RegisterService(&SyntaxHighlighter_ServiceDesc, srv)
}

func _SyntaxHighlighter_SyntaxHighlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyntaxHighlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntaxHighlighterServer).SyntaxHighlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.syntax_highlight.v1beta1.SyntaxHighlighter/SyntaxHighlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntaxHighlighterServer).SyntaxHighlight(ctx, req.(*SyntaxHighlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyntaxHighlighter_ServiceDesc is the grpc.ServiceDesc for SyntaxHighlighter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntaxHighlighter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.stack.syntax_highlight.v1beta1.SyntaxHighlighter",
	HandlerType: (*SyntaxHighlighterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyntaxHighlight",
			Handler:    _SyntaxHighlighter_SyntaxHighlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "build/stack/syntax_highlight/v1beta1/syntax_highlight.proto",
}
