// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackagesClient is the client API for Packages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesClient interface {
	CreateProtoPackage(ctx context.Context, opts ...grpc.CallOption) (Packages_CreateProtoPackageClient, error)
	GetProtoPackage(ctx context.Context, in *GetProtoPackageRequest, opts ...grpc.CallOption) (*ProtoPackage, error)
}

type packagesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesClient(cc grpc.ClientConnInterface) PackagesClient {
	return &packagesClient{cc}
}

func (c *packagesClient) CreateProtoPackage(ctx context.Context, opts ...grpc.CallOption) (Packages_CreateProtoPackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Packages_ServiceDesc.Streams[0], "/build.stack.protobuf.package.v1alpha1.Packages/CreateProtoPackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &packagesCreateProtoPackageClient{stream}
	return x, nil
}

type Packages_CreateProtoPackageClient interface {
	Send(*CreateProtoPackageRequest) error
	CloseAndRecv() (*longrunningpb.Operation, error)
	grpc.ClientStream
}

type packagesCreateProtoPackageClient struct {
	grpc.ClientStream
}

func (x *packagesCreateProtoPackageClient) Send(m *CreateProtoPackageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packagesCreateProtoPackageClient) CloseAndRecv() (*longrunningpb.Operation, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(longrunningpb.Operation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packagesClient) GetProtoPackage(ctx context.Context, in *GetProtoPackageRequest, opts ...grpc.CallOption) (*ProtoPackage, error) {
	out := new(ProtoPackage)
	err := c.cc.Invoke(ctx, "/build.stack.protobuf.package.v1alpha1.Packages/GetProtoPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackagesServer is the server API for Packages service.
// All implementations must embed UnimplementedPackagesServer
// for forward compatibility
type PackagesServer interface {
	CreateProtoPackage(Packages_CreateProtoPackageServer) error
	GetProtoPackage(context.Context, *GetProtoPackageRequest) (*ProtoPackage, error)
	mustEmbedUnimplementedPackagesServer()
}

// UnimplementedPackagesServer must be embedded to have forward compatible implementations.
type UnimplementedPackagesServer struct {
}

func (UnimplementedPackagesServer) CreateProtoPackage(Packages_CreateProtoPackageServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateProtoPackage not implemented")
}
func (UnimplementedPackagesServer) GetProtoPackage(context.Context, *GetProtoPackageRequest) (*ProtoPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoPackage not implemented")
}
func (UnimplementedPackagesServer) mustEmbedUnimplementedPackagesServer() {}

// UnsafePackagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServer will
// result in compilation errors.
type UnsafePackagesServer interface {
	mustEmbedUnimplementedPackagesServer()
}

func RegisterPackagesServer(s grpc.ServiceRegistrar, srv PackagesServer) {
	s.RegisterService(&Packages_ServiceDesc, srv)
}

func _Packages_CreateProtoPackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackagesServer).CreateProtoPackage(&packagesCreateProtoPackageServer{stream})
}

type Packages_CreateProtoPackageServer interface {
	SendAndClose(*longrunningpb.Operation) error
	Recv() (*CreateProtoPackageRequest, error)
	grpc.ServerStream
}

type packagesCreateProtoPackageServer struct {
	grpc.ServerStream
}

func (x *packagesCreateProtoPackageServer) SendAndClose(m *longrunningpb.Operation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packagesCreateProtoPackageServer) Recv() (*CreateProtoPackageRequest, error) {
	m := new(CreateProtoPackageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Packages_GetProtoPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtoPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).GetProtoPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.protobuf.package.v1alpha1.Packages/GetProtoPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).GetProtoPackage(ctx, req.(*GetProtoPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Packages_ServiceDesc is the grpc.ServiceDesc for Packages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.stack.protobuf.package.v1alpha1.Packages",
	HandlerType: (*PackagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProtoPackage",
			Handler:    _Packages_GetProtoPackage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateProtoPackage",
			Handler:       _Packages_CreateProtoPackage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "build/stack/protobuf/package/v1alpha1/package.proto",
}
