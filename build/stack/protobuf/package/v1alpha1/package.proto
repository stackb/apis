// Copyright 2020-2023 Stack.Build LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package build.stack.protobuf.package.v1alpha1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";
import "google/longrunning/operations.proto";

option go_package = "github.com/stackb/apis/build/stack/protobuf/package/v1alpha1";

// ProtoRepository represents a place where source files are located.
message ProtoRepository {
    // server is the platform where the repository is housed (e.g. 'github.com'; GITHUB_SERVER_URL).
    string server = 1;
    // owner is the github owner name (e.g. 'protocolbuffers'; GITHUB_REPOSITORY_OWNER).
    string owner = 2;
    // name is the name of the repository (e.g. 'protobuf'; GITHUB_REPOSITORY_NAME).
    string name = 3;
    // repository is the full name of the repository (e.g. github.com/protocolbuffers/protobuf'; GITHUB_REPOSITORY)
    string repository = 4;
}

// ProtoSourceLocation is a repository directory at a given repository state.
message ProtoSourceLocation {
    // The source repository
    ProtoRepository repository = 1;
    // prefix is the directory prefix that would be stripped to make paths in
    // the descriptors relative to (e.g. 'src' for
    // 'github.com/protocolbuffers/protobuf/src/google/protobuf/any.proto').
    string prefix = 2;
    // commit is the git commit sha (e.g. '4dd15db6eb3955745f379d28fb4a2fcfb6753de3'; GITHUB_SHA).
    string commit = 3;
    // ref_name is the optional tag or branch name (GITHUB_REF_TYPE).
    string ref_name = 5;
    // ref_type is the optional ref_type (GITHUB_REF_TYPE).
    string ref_type = 6;
}

// ProtoAsset represents a compiled FileDescriptorProto and metadata.
message ProtoAsset {
    // The compiled file.
    google.protobuf.FileDescriptorProto file = 1;
    // Hash of the FileDescriptorProto data.
    string sha256 = 2;
    // size in bytes of the asset
    uint64 size = 3;
    // URL where the asset bytes are stored.
    string url = 4;
}

// ProtoCompiler represents the tool used to generate proto descriptors.
message ProtoCompiler {
    // the name of the compiler (e.g. 'protoc').
    string name = 1;
    // the version of the compiler, typically the numeric part of `protoc
    // -version` (e.g '3.14.0').
    string version = 2;
    // the URL of the compiler release (e.g. 'https://github.com/protocolbuffers/protobuf/releases/tag/v23.3').
    string url = 3;
}

// ProtoPackage represents a set of compiled proto files for a given state of files
// under source control.
message ProtoPackage {
    // root location for the assets
    ProtoSourceLocation location = 1;
    // compiler used to create the assets.
    ProtoCompiler compiler = 2;
    // assets is the set of descriptors in this package.
    repeated ProtoAsset assets = 4;
    // sha256 is the sha256 sum of the asset sha256s.
    string sha256 = 5;
    // URL for this package
    string url = 6;
    // time when the package was created.
    google.protobuf.Timestamp created_at = 7;
}

message CreateProtoPackageRequest {
    // The release info.  For a client streaming call, this only needs to be populated on the first send.
    ProtoSourceLocation root = 1;
    // The compiler info.  For a client streaming call, this only needs to be populated on the first send.
    ProtoCompiler compiler = 2;
    // prefix is the directory prefix that would be stripped to make paths in
    // the descriptors relative to (e.g. 'src' for
    // 'github.com/protocolbuffers/protobuf/src/google/protobuf/any.proto').
    string prefix = 3;
    // A list of assets.  The client may decide to chunk a large list into multiple calls based on message size.
    repeated ProtoAsset assets = 4;
}

message GetProtoPackageRequest {
    // the package operation ID
    string id = 1;
}

// Packages performs operations on packages.
service Packages {
    // CreateProtoPackage assembles a stream of packages.  The first request must
    // include the release & compiler objects, afterwards it does not need to be
    // sent (and will likely be ignored).  The final list of assets will be
    // merged in the server.
    rpc CreateProtoPackage(stream CreateProtoPackageRequest) returns (google.longrunning.Operation) {
        option idempotency_level = IDEMPOTENT;
    }

    // GetProtoPackage returns a package identified by the longrunning operations ID.
    rpc GetProtoPackage(GetProtoPackageRequest) returns (ProtoPackage) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

}